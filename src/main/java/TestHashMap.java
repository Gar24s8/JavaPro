import java.util.HashMap;
import java.util.Map;

public class TestHashMap {
    /**
     * предположим, что есть 2 множества, есть таблица, одна колонка содержит элементы одного множества (например, номера классов),
     * а другая содержит элементы другого множества (например, фамилии учеников)
     * <p>
     * 1 (класс) -> [.. .. .. ..] (массив учеников)
     * 2 -> [.. .. ..]
     * ...
     * n -> [.. .. ..]
     * HashMap позволяет организовать такую структуру данных
     *
     *  У класса HashMap есть важная особенность, пары ключ-значение не имеют какого-либо порядка
     *  Порядок вывода меняется с запуском программы, т.к. используется хэширование и зависит от случайных величин
     *  HashMap следует использовать тогда, когда не важен порядок пар ключ-значение, а важно лишь их наличие
     **/


    public static void main(String[] args) {
        // при создании объектов класса HasMap, который ссылается на интерфейс Мар, необходимо указать тип ключа и тип значения!!!
        // Все классы, реализующие интерфейс Map, хранят пары ключ-значение
        // Следуя описанию выше, ключ - номер класса, значение - ученики.
        Map<Integer, String> map = new HashMap<>();

        // для того, чтобы положить данные в мар, необходимо использовать метод put(), который принимает на вход 2 аргумента
        // 1 - ключ, 2 - значение, которое хотим связать с этим ключом
        map.put(1, "Один");
        map.put(2, "Два");
        map.put(3, "Три");
        // т.к. объекты класса Map реализуют метод toString(), дополнительных преобразований не требуется
        System.out.println(map);

        // проверка поведения Map, при вставке новой пары ключ-значение, при наличии существующей
        map.put(3, "Другое значение для ключа 3, отличное от существующего");
        // после вставки ключа с новым значением, старое значение переписывается новым, поэтому в Map не может быть дубликата ключей
        System.out.println(map);

        // в методе get() можно получить значение, указав ключ
        System.out.println(map.get(1));
        // при попытке получить значение по ключу, которого не существует, вернется null
        System.out.println(map.get(10));

        // Проход по Map
        // каждая пара ключ-значение это Entry, пары не рассматриваются отдельно, рассматрваются как своя структура данных
        // в параметрах цикла получаем доступ к этой структуре, параметризуем (Integer, String), присваиваем имя entry
        // далее вызывем метод entrySet на map, этот метод возвращает набор всех пар в этой map, т.е. возвращает все объекты класса Entry
        for (Map.Entry<Integer, String> entry : map.entrySet()) {
            // здесь можем взаимодействовать с этими объектами, т.е. вызвать возврат ключа и/или значения
            System.out.println(entry.getKey() + " : " + entry.getValue());
        }
    }
}
